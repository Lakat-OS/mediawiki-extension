<?php

namespace MediaWiki\Extension\Lakat;

use CommentStoreComment;
use ContentHandler;
use Exception;
use FormSpecialPage;
use MediaWiki\Extension\Lakat\Storage\LakatStorageStub;
use MediaWiki\MediaWikiServices;
use MediaWiki\Revision\SlotRecord;
use Status;
use Title;

class SpecialCreateBranch extends FormSpecialPage {
	private Title $branchPageTitle;

	public function __construct() {
		parent::__construct( 'CreateBranch' );
	}

	protected function getGroupName() {
		return 'lakat';
	}

	protected function getDisplayFormat() {
		return 'ooui';
	}

	protected function getFormFields() {
		$formDescriptor = [
			'BranchName' => [
				'type' => 'text',
				'label-message' => 'createbranch-name',
			],
			'Token' => [
				'type' => 'text',
				'label-message' => 'createbranch-token',
			],
			'BranchType' => [
				'type' => 'radio',
				'flatlist' => 1,
				'options-messages' => [
					'createbranch-type-proper' => 'proper',
					'createbranch-type-twig' => 'twig'
				],
				'default' => 'proper',
			],
			'AllowConflicts' => [
				'type' => 'check',
				'label-message' => 'createbranch-allow-conflicts',
				'value' => 0,
			],
		];

		return $formDescriptor;
	}

	public function onSubmit( array $data ) {
		$branchName = $data['BranchName'];

		$title = Title::newFromText( $branchName );
		if ( $title->isKnown() ) {
			return Status::newFatal( 'createbranch-error-already-exists' );
		}
		if ( !$title->canExist() ) {
			return Status::newFatal( 'createbranch-error-invalid-name' );
		}
		$this->branchPageTitle = $title;

		// create branch remotely
		try {
			$branchId = LakatStorageStub::getInstance()->createBranch( $branchName, $data );
		} catch ( Exception $e ) {
			return Status::newFatal( 'createbranch-error-remote' );
		}

		// create branch root page
		$page = MediaWikiServices::getInstance()->getWikiPageFactory()->newFromTitle( $title );

		$text = "This is branch root page. It is autogenerated on branch creation.\n";
		$text .= "{| class=\"wikitable\"\n";
		$text .= "|+ Branch parameters\n";
		$text .= "|-\n";
		$text .= sprintf( "| Id || %s\n", $branchId );
		$text .= "|-\n";
		$text .= sprintf( "| Name || %s\n", $data['BranchName'] );
		$text .= "|-\n";
		$text .= sprintf( "| Token || %s\n", $data['Token'] );
		$text .= "|-\n";
		$text .= sprintf( "| Type || %s\n", $data['BranchType'] );
		$text .= "|-\n";
		$text .= sprintf( "| Allow conflicts || %s\n", $data['AllowConflicts'] ? 'yes' : 'no' );
		$text .= "|}\n";
		$content = ContentHandler::makeContent( $text, $title );

		$comment = CommentStoreComment::newUnsavedComment(
			wfMessage( 'createbranch-revision-comment' )->inContentLanguage()->text()
		);

		$page->newPageUpdater( $this->getUser() )
			->setContent( SlotRecord::MAIN, $content )
			->saveRevision( $comment );

		return Status::newGood();
	}

	public function onSuccess() {
		$this->getOutput()->redirect( $this->branchPageTitle->getLocalURL() );
	}
}

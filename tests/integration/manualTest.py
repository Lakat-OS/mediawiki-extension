import os
import sys
import shutil

# import dotenv
import dotenv

# if .env exists, load it, otherwise load .example.env





# create LocalSettings.php text
extensionName = "Lakat"


def createLocalSettingsText(serviceNumber="1", withExtensions=False):

    secretKey = os.getenv("SECRET_KEY")
    upgradeKey = os.getenv("UPGRADE_KEY")
    web_port = os.getenv("WEBPORT_{serviceNumber}".format(serviceNumber=serviceNumber), "8280")
    dbserver = "database{serviceNumber}".format(serviceNumber=serviceNumber)
    dbname = os.getenv("DB_{serviceNumber}".format(serviceNumber=serviceNumber))
    dbuser = os.getenv("USER_{serviceNumber}".format(serviceNumber=serviceNumber))
    dbpassword = os.getenv("DB_PASSWORD_{serviceNumber}".format(serviceNumber=serviceNumber))
    dbport = os.getenv("DB_PORT_{serviceNumber}".format(serviceNumber=serviceNumber), "3307")

    # print the service number
    print(serviceNumber)
    print("serviceNumber: " + str(serviceNumber))
    # print all those variables in one statement
    print("web_port: {web_port}, dbserver: {dbserver}, dbname: {dbname}, dbuser: {dbuser}, dbpassword: {dbpassword}, secretKey: {secretKey}, upgradeKey: {upgradeKey}".format(web_port = web_port, dbserver = dbserver, dbname = dbname, dbuser = dbuser, dbpassword = dbpassword, secretKey = secretKey, upgradeKey = upgradeKey))

    if dbserver == None:
        dbserver = "database1"
    if dbname == None:
        dbname = "wiki1"
    if dbuser == None:
        dbuser = "wikiuser1"
    if dbpassword == None:
        dbpassword = "password1"
    if secretKey == None:
        secretKey = "41571460fe422309790b2e11989fd54ab1f1d7fd43ae401b34e90912bf3f18c3"
    if upgradeKey == None:
        upgradeKey = "ab05d31feb1d8198"
    # print all those variables in one statement


    text = """<?php
# This file was automatically generated by the MediaWiki 1.39.4
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See docs/Configuration.md for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {{
	exit;
}}


## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "Extension Test";
$wgMetaNamespace = "Extension_Test";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://localhost:{web_port}";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/resources/assets/Lakat.png",
	'icon' => "$wgResourceBasePath/resources/assets/Lakat.png",
];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "";
$wgPasswordSender = "";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "{dbserver}";
$wgDBname = "{dbname}";
$wgDBuser = "{dbuser}";
$wgDBpassword = "{dbpassword}";

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = "en";

# Time zone
$wgLocaltimezone = "UTC";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = "{secretKey}";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "{upgradeKey}";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "https://creativecommons.org/licenses/by/4.0/";
$wgRightsText = "Creative Commons Attribution";
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-by.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

$wgShowExceptionDetails = true;

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "vector";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MinervaNeue' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );""".format(web_port = web_port, dbserver = dbserver, dbname = dbname, dbuser = dbuser, dbpassword = dbpassword, secretKey = secretKey, upgradeKey = upgradeKey)

    addExtensions = """


# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtension( 'ExtensionName' );
# to LocalSettings.php. Check specific extension documentation for more details.
# The following extensions were automatically enabled:
wfLoadExtension( '{extensionName}' );

$wgLakatVandalizeEachPage = true;

# End of automatically generated settings.
# Add more configuration options below.""".format(extensionName = extensionName)

    if withExtensions:
        text += addExtensions
    return text

def getVolumes(serviceNumber="1", withLocalSettings = False, withExtensions = False):
    volumes = ""
    if withLocalSettings or withExtensions:
        volumes = """\n    volumes:"""
    if withLocalSettings:
        volumes += """
      - ./LocalSettings{serviceNumber}.php:/var/www/html/LocalSettings.php""".format(serviceNumber=serviceNumber)
    if withExtensions:
        volumes += """
      - ./extensions:/var/www/html/extensions"""   
    
    return volumes


# docker-compose.yml text
def createDockerComposeText(withLocalSettings = False, withExtensions = False): 
    
    db_1 = os.getenv("DB_1")
    db_2 = os.getenv("DB_2")
    user_1 = os.getenv("USER_1")
    user_2 = os.getenv("USER_2")
    password_1 = os.getenv("DB_PASSWORD_1")
    password_2 = os.getenv("DB_PASSWORD_2")
    db_port_1 = os.getenv("DB_PORT_1")
    db_port_2 = os.getenv("DB_PORT_2")
    pma_port = os.getenv("PMA_PORT")
    webport1 = os.getenv("WEBPORT_1")
    webport2 = os.getenv("WEBPORT_2")

    if db_1 == None:
        db_1 = "wiki1"
    if db_2 == None:
        db_2 = "wiki2"
    if user_1 == None:
        user_1 = "wikiuser1"
    if user_2 == None:
        user_2 = "wikiuser2"
    if password_1 == None:
        password_1 = "password1"
    if password_2 == None:
        password_2 = "password2"
    if db_port_1 == None:
        db_port_1 = "3307"
    if db_port_2 == None:
        db_port_2 = "3308"
    if webport1 == None:
        webport1 = "8280"
    if webport2 == None:
        webport2 = "8281"
    if pma_port == None:
        pma_port = "8380"



    text = """
version: '3.7'
services:
  web1:
    image: mediawiki:1.39
    container_name: web1
    ports:
      - {webport1}:80
    depends_on:
      - database1
    restart: unless-stopped""".format(webport1=webport1) 

    text += getVolumes("1", withLocalSettings, withExtensions)  
    
    text += """

  web2:
    image: mediawiki:1.39
    container_name: web2
    ports:
      - {webport2}:80
    depends_on:
      - database2
    restart: unless-stopped""".format(webport2=webport2) + getVolumes("2", withLocalSettings, withExtensions)  + """
    
  database1:
    image: mariadb
    container_name: db1
    environment:
      MYSQL_DATABASE: '{db_1}'
      MYSQL_USER: '{user_1}'
      MYSQL_PASSWORD: '{password_1}'
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
    ports:
      - {db_port_1}:3306
    volumes:
      - ./database1:/var/lib/mysql
      - ./wiki.sql:/docker-entrypoint-initdb.d/wiki.sql
    restart: unless-stopped

  database2:
    image: mariadb
    container_name: db2
    environment:
      MYSQL_DATABASE: '{db_2}'
      MYSQL_USER: '{user_2}'
      MYSQL_PASSWORD: '{password_2}'
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
    ports:
      - {db_port_2}:3306
    volumes:
      - ./database2:/var/lib/mysql
      - ./wiki.sql:/docker-entrypoint-initdb.d/wiki.sql
    restart: unless-stopped
  

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    environment:
      PMA_ARBITRARY: 1
    ports:
      - {pma_port}:80
    restart: unless-stopped
    depends_on:
      - database1
      - database2""".format(db_1=db_1, db_2=db_2, user_1=user_1, user_2=user_2, password_1=password_1, password_2=password_2, db_port_1=db_port_1, db_port_2=db_port_2, pma_port=pma_port)
    
    return text


def createDockerCompose(withLocalSettings = False, withExtensions = False):
    text = createDockerComposeText(withLocalSettings, withExtensions)
    with open("docker-compose.yml", "w") as f:
        f.write(text)
        

def createLocalSettings(serviceNumber="1", withExtensions = False):
    text = createLocalSettingsText(serviceNumber=serviceNumber, withExtensions=withExtensions)
    with open("LocalSettings{serviceNumber}.php".format(serviceNumber=serviceNumber), "w") as f:
        f.write(text)


def main(overwrite = True):
    # check whether docker compose is installed
    if shutil.which("docker-compose") == None:
        print("docker-compose is not installed.")
        sys.exit(1)
    else:
        print("docker-compose is installed.")
    
    # change to directory two folders up using os.chdir and os.path.join
    os.chdir(os.path.dirname(__file__))

    if os.path.isfile(".env"):
        dotenv.load_dotenv(".env")

    else:
        if os.path.isfile(".example.env"):
            dotenv.load_dotenv(".example.env")
        else: 
            sys.exit("No .env or .example.env file found.")
    
    os.chdir(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))


    # check whether the folder "manualTest" exists. If not create it. If yes, delete it and create it again.
    if not os.path.exists("manualTest"):
        os.mkdir("manualTest")
    os.chdir("manualTest")
    print("manual test folder is created.")
    
    # check whether LocalSettings.php exists
    services = 2
    for serviceNumber in range(1, services + 1):
        settingsName = "LocalSettings{serviceNr}.php".format(serviceNr=serviceNumber)
        if os.path.exists(settingsName):
            print(settingsName +" exists.")
        else:
            print(settingsName + " does not exist.")
            createLocalSettings(serviceNumber=serviceNumber, withExtensions=True)
            print(settingsName + " is created.")

    # check whether both Local
    
    # check whether docker-compose.yml exists
    createDockerCompose(withLocalSettings=True, withExtensions=True)
    print("docker-compose.yml is created.")

    # check whether extensions folder exists if not create
    if not os.path.exists("extensions"):
        os.mkdir("extensions")
        print("extensions folder is created.")
    else:
        print("extensions folder exists.")
    
    # check whether BoilerPlate folder exists
    if not os.path.exists(os.path.join("extensions", extensionName)):
        print('{} folder does not exist.'.format(extensionName))


    # check whether the extensionName folder exists
    extensionNameFolderExists = os.path.exists(os.path.join("extensions", extensionName))

    # change back to the parent directory
    os.chdir("..")


    # copy BoilerPlate to the extensions folder
    if (overwrite and extensionNameFolderExists) or not extensionNameFolderExists:
        if extensionNameFolderExists:
            shutil.rmtree(os.path.join("manualTest", "extensions", extensionName))
        shutil.copytree(extensionName, os.path.join("manualTest", "extensions", extensionName))
    
    # copy the file test/dbdumps/wikiNoContentYet.sql to the manualTest folder and name it wiki.sql
    shutil.copyfile(os.path.join("tests", "dbdumps", "wikiNoContentYet.sql"), os.path.join("manualTest", "wiki.sql"))

    # copy the file tests/img/Lakatdummy.svg to the manualTest folder and name it Lakatdummy.svg
    logo = "Lakatdummygithub.png"
    shutil.copyfile(os.path.join("tests", "img", logo), os.path.join("manualTest", logo))
    print('Logo has been copied to manualTest folder.')

    # run docker-compose up
    os.chdir("manualTest")
    os.system("docker-compose up --build -d")
    print('docker-compose up --build -d is executed.')

    # docker cp the Lakatdummy.svg file to the web1 container
    os.system("docker cp {logo} web1:/var/www/html/resources/assets/Lakat.png".format(logo=logo))
    os.system("docker cp {logo} web2:/var/www/html/resources/assets/Lakat.png".format(logo=logo))

    # start the browser brave and open localhost:8280
    # webport = os.getenv("WEB_PORT", "8280")
    # os.system("brave-browser")




if __name__ == "__main__":

    overwrite = True

    # check whether there is an argument given
    if len(sys.argv) > 1:
        if sys.argv[1] == "--dont-overwrite":
            overwrite = False
            
    main(overwrite=overwrite)    